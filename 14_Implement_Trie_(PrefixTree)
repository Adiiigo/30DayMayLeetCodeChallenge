Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true

Note:

    You may assume that all inputs are consist of lowercase letters a-z.
    All inputs are guaranteed to be non-empty strings.

Approach1:
class trieNode {
    trieNode* child[26];
    bool eow = false;
    friend class Trie;

    public:
    trieNode (){
        for(auto& i : child)
            i=NULL;
    } 
};



class Trie {
    trieNode *root;
public:
    /** Initialize your data structure here. */
    Trie() {
        root = new trieNode(); 
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        trieNode* node = root;
        int i =0;
        while( word[i] != '\0' ){
            int idx = word[i] -'a';
            if(!node->child[idx]){
               node->child[idx] = new trieNode();
            }
            node = node->child[idx];
            i++; 
        }
        node->eow = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        trieNode * node = root;
        int i =0;
        while(word[i] != '\0'){
            int idx = word[i] - 'a';
            if(!node->child[idx])
                return false;
            node = node->child[idx];
            i++;
        }
         if(node->eow == true)
            return true;
        return false;
            
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        
        
        trieNode * node = root;
        int i =0;
        string ans;
        while(prefix[i] != '\0'){
            int idx = prefix[i] - 'a';
            if(!node->child[idx])
                break;
            node = node->child[idx];
            ans += prefix[i];
            i++;
        }
        if(ans == prefix)
            return true;

        return false;
        
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
 
 //Approach 1 ends
